// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["mongoDb"]
}

// --------------------------------------

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("ADMIN")
  stocks         Wood[]

  adminId     String? @db.ObjectId
  admin       User?   @relation("adminCommercials", fields: [adminId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  commercials User[]  @relation("adminCommercials")

  commercialsId String[] @db.ObjectId

  commands   Command[] @relation("userCommands")
  commandsId String[]  @db.ObjectId

  suppliers Supplier[] @relation("userSuppliers")
  // suppliersId String[]   @db.ObjectId

  buyers Buyer[] @relation("userBuyers")
  //buyersId String[] @db.ObjectId

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Token {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@unique([hashedToken, type])
}

model Supplier {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  phone     String?
  email     String?

  stock Wood[]

  user   User?   @relation("userSuppliers", fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Buyer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstname String
  lastname  String
  phone     String?
  email     String?
  company   String?

  user   User?   @relation("userBuyers", fields: [userId], references: [id])
  userId String? @db.ObjectId

  @@unique([firstname, lastname])
}

model Wood {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  price     Float
  quantity  Int?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @db.ObjectId

  supplier   Supplier? @relation(fields: [supplierId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supplierId String?   @db.ObjectId

  command   Command? @relation(fields: [commandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commandId String?  @db.ObjectId

  @@unique([type, supplierId, userId])
}

model Command {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  price     Float
  status    String

  wood Wood[]

  user   User   @relation("userCommands", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  // buyer          Buyer?    @relation(fields: [buyerId], references: [id])
  buyerId String? @db.ObjectId

  // supplier       Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String? @db.ObjectId
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
